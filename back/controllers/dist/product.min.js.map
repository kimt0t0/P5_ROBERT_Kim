{"version":3,"sources":["product.js"],"names":["uuid","require","Product","exports","getAllProducts","req","res","next","products","map","product","mappedProducts","imageUrl","protocol","get","status","json","send","Error","params","id","then","orderProducts","body","contact","queries","firstName","lastName","address","city","email","queryPromise","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_loop","_step","value","Promise","resolve","reject","productId","push","err","_iterator","all","orderId","error"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,WACfC,QAAUD,QAAQ,qBAExBE,QAAQC,eAAiB,SAACC,EAAKC,EAAKC,GAFpCL,QAAMA,OAAUD,KAIZ,SAACO,GAFLL,IAAQC,EAAiBI,EAAAC,IAAMH,SAANI,GAGbC,OAFVT,EAAAU,SACEP,EAAAQ,SAAc,MAAAR,EAAAS,IAAA,QAAA,WAAAJ,EAAAE,SACND,IAEJL,EAAAS,OAAOL,KAAPM,KAAAL,KAPR,MAGE,WAUIL,EAAIS,OAAO,KAAKE,KAAK,IAAIC,MAAM,uBAMnChB,QAAAA,cAAqBiB,SAAAA,EAAOC,EAAIC,GAE5BnB,QAAKQ,SAASL,EAAAc,OAAAC,IAAAC,KACZ,SAAAX,GACD,IAAAA,EADC,OAAOJ,EAAIS,OAAO,KAAKE,KAAK,IAAIC,MAAM,uBAGxCZ,EAAAM,SAAqBF,EAAAA,SAArB,MAAAL,EAAAS,IAAA,QAAA,WAAAJ,EAAAE,SANJN,EAAAS,OASE,KAAAC,KAAMN,KAPJ,MAHN,WAgBAJ,EAAAS,OAAA,KAAAE,KAAA,IAAAC,MAAA,uBAsBGf,QAAAmB,cAAA,SAAAjB,EAAAC,EAAAC,GARD,KAAKF,EAAIkB,KAAKC,SASVC,EAAAA,KAAUD,QAAdE,WAV0CrB,EAAAkB,KAAAC,QAAAG,UAAAtB,EAAAkB,KAAAC,QAAAI,SAAAvB,EAAAkB,KAAAC,QAAAK,MAMrCxB,EAAIkB,KAAKC,QAAQM,OANoBzB,EAAAkB,KAAAf,UAAA,OAAAF,EAAAS,OAAA,KAAAE,KAAA,IAAAC,MAAA,iBAYxC,IAAAO,EAAMM,GAHPC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAIGjC,IAJH,IAIGA,EAJHkC,EAAA,WAAA,IAIGlC,EAJHmC,EAAAC,MAMOP,EAAc,IAAAQ,QAAA,SAAAC,EAAAC,GACZA,QAAAA,SAAOC,GAAArB,KACR,SAAAX,GAFIA,GAGLA,EAAQE,sBAAW8B,GALvBhC,EAAAE,SASEP,EAAMQ,SAAA,MAAAR,EAAAS,IAAA,QAAA,WAAAJ,EAAAE,SACJ6B,EAAO/B,KAPL+B,MAWRhB,WA3BwCgB,EAAA,uBA4BzChB,EAAAkB,KAAAZ,IAfG7B,EAAAG,EAAiBqC,KAAAA,SAAjBxC,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EACEkC,IALL,MAAAQ,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,IAAAZ,GAAA,MAAAa,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAZ,EAAA,MAAAC,GATyCK,QAAAO,IAAArB,GAAAJ,KAAA,SAAAb,GAAA,IAAAuC,EAAA/C,OAAA,OAAAM,EAAAS,OAAA,KAAAC,KAAA,CAAAQ,QAAAnB,EAAAkB,KAAAC,QAAAhB,SAAAA,EAAAuC,QAAAA,MAAA,MAAA,SAAAC,GAAA,OAAA1C,EAAAS,OAAA,KAAAC,KAAA,IAAAE,MAAA8B","file":"product.min.js","sourcesContent":["const uuid = require('uuid/v1');\nconst Product = require('../models/Product');\n\nexports.getAllProducts = (req, res, next) => {\n  Product.find().then(\n    (products) => {\n      const mappedProducts = products.map((product) => {\n        product.imageUrl = req.protocol + '://' + req.get('host') + '/images/' + product.imageUrl;\n        return product;\n      });\n      res.status(200).json(mappedProducts);\n    }\n  ).catch(\n    () => {\n      res.status(500).send(new Error('Database error!'));\n    }\n  );\n};\n\nexports.getOneProduct = (req, res, next) => {\n  Product.findById(req.params.id).then(\n    (product) => {\n      if (!product) {\n        return res.status(404).send(new Error('Product not found!'));\n      }\n      product.imageUrl = req.protocol + '://' + req.get('host') + '/images/' + product.imageUrl;\n      res.status(200).json(product);\n    }\n  ).catch(\n    () => {\n      res.status(500).send(new Error('Database error!'));\n    }\n  )\n};\n\n/**\n *\n * Expects request to contain:\n * contact: {\n *   firstName: string,\n *   lastName: string,\n *   address: string,\n *   city: string,\n *   email: string\n * }\n * products: [string] <-- array of product _id\n *\n */\nexports.orderProducts = (req, res, next) => {\n  if (!req.body.contact ||\n      !req.body.contact.firstName ||\n      !req.body.contact.lastName ||\n      !req.body.contact.address ||\n      !req.body.contact.city ||\n      !req.body.contact.email ||\n      !req.body.products) {\n    return res.status(400).send(new Error('Bad request!'));\n  }\n  let queries = [];\n  for (let productId of req.body.products) {\n    const queryPromise = new Promise((resolve, reject) => {\n      Product.findById(productId).then(\n        (product) => {\n          if (!product) {\n            reject('Product not found: ' + productId);\n          }\n          product.imageUrl = req.protocol + '://' + req.get('host') + '/images/' + product.imageUrl;\n          resolve(product);\n        }\n      ).catch(\n        () => {\n          reject('Database error!');\n        }\n      )\n    });\n    queries.push(queryPromise);\n  }\n  Promise.all(queries).then(\n    (products) => {\n      const orderId = uuid();\n      return res.status(201).json({\n        contact: req.body.contact,\n        products: products,\n        orderId: orderId\n      })\n    }\n  ).catch(\n    (error) => {\n      return res.status(500).json(new Error(error));\n    }\n  );\n};\n"]}