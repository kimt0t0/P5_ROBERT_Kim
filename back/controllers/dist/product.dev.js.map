{"version":3,"sources":["product.js"],"names":["uuid","require","Product","exports","getAllProducts","req","res","next","find","then","products","mappedProducts","map","product","imageUrl","protocol","get","status","json","send","Error","getOneProduct","findById","params","id","orderProducts","body","contact","firstName","lastName","address","city","email","queries","productId","queryPromise","Promise","resolve","reject","push","all","orderId","error"],"mappings":"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","sourcesContent":["const uuid = require('uuid/v1');\nconst Product = require('../models/Product');\n\nexports.getAllProducts = (req, res, next) => {\n  Product.find().then(\n    (products) => {\n      const mappedProducts = products.map((product) => {\n        product.imageUrl = req.protocol + '://' + req.get('host') + '/images/' + product.imageUrl;\n        return product;\n      });\n      res.status(200).json(mappedProducts);\n    }\n  ).catch(\n    () => {\n      res.status(500).send(new Error('Database error!'));\n    }\n  );\n};\n\nexports.getOneProduct = (req, res, next) => {\n  Product.findById(req.params.id).then(\n    (product) => {\n      if (!product) {\n        return res.status(404).send(new Error('Product not found!'));\n      }\n      product.imageUrl = req.protocol + '://' + req.get('host') + '/images/' + product.imageUrl;\n      res.status(200).json(product);\n    }\n  ).catch(\n    () => {\n      res.status(500).send(new Error('Database error!'));\n    }\n  )\n};\n\n/**\n *\n * Expects request to contain:\n * contact: {\n *   firstName: string,\n *   lastName: string,\n *   address: string,\n *   city: string,\n *   email: string\n * }\n * products: [string] <-- array of product _id\n *\n */\nexports.orderProducts = (req, res, next) => {\n  if (!req.body.contact ||\n      !req.body.contact.firstName ||\n      !req.body.contact.lastName ||\n      !req.body.contact.address ||\n      !req.body.contact.city ||\n      !req.body.contact.email ||\n      !req.body.products) {\n    return res.status(400).send(new Error('Bad request!'));\n  }\n  let queries = [];\n  for (let productId of req.body.products) {\n    const queryPromise = new Promise((resolve, reject) => {\n      Product.findById(productId).then(\n        (product) => {\n          if (!product) {\n            reject('Product not found: ' + productId);\n          }\n          product.imageUrl = req.protocol + '://' + req.get('host') + '/images/' + product.imageUrl;\n          resolve(product);\n        }\n      ).catch(\n        () => {\n          reject('Database error!');\n        }\n      )\n    });\n    queries.push(queryPromise);\n  }\n  Promise.all(queries).then(\n    (products) => {\n      const orderId = uuid();\n      return res.status(201).json({\n        contact: req.body.contact,\n        products: products,\n        orderId: orderId\n      })\n    }\n  ).catch(\n    (error) => {\n      return res.status(500).json(new Error(error));\n    }\n  );\n};\n"],"file":"product.dev.js"}