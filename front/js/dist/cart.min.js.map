{"version":3,"sources":["cart.js"],"names":["productId","productColor","productQuantity","productImgUrl","cart","localStorage","cartCounter","getProduct","id","regeneratorRuntime","async","_context","prev","next","abrupt","fetch","then","httpBodyResponse","json","products","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","product","_id","err","error","alert","stop","setFormAttributes","inputName","regexModel","min","max","title","_context2","setAttribute","hydrateDom","totalPrice","cartKey","cartItem","cartItemImg","productImg","cartItemContent","cartItemContentDescr","cartItemContentTitle","cartItemContentColor","cartItemContentPrice","cartItemSettings","settingsQuantity","settingsQuantityText","settingsQuantityInput","deleteContainer","deleteText","_context4","reg","formInput","_context3","errorInput","document","createElement","getElementById","appendChild","testFormInput","imageUrl","altTxt","textContent","name","Number","price","e","address","city","regNames","regAddress","regEmail","addEventListener","email","userInput","value","trim","color","log","firstName","lastName","preventDefault","removeItem","test","i","length","key","splitKey"],"mappings":"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","file":"cart.min.js","sourcesContent":["/* *** VARIABLES *** */\r\nvar cart = localStorage;\r\n\r\nvar cartCounter = 0;\r\nvar totalPrice = 0;\r\n\r\nvar productId, productColor, productQuantity, productImgUrl;\r\n\r\n\r\n/* *** FONCTIONS *** */\r\n\r\n/* GÉNÉRAL */\r\n/* Accès aux infos produit sur serveur */\r\nasync function getProduct(id) {\r\n    return fetch(\"http://localhost:3000/api/products\")\r\n      .then(function(httpBodyResponse) {\r\n        return httpBodyResponse.json();\r\n      })\r\n      .then(function(products) {\r\n          for (product of products) { \r\n              if (product._id == id) {  \r\n                return product;}\r\n          }\r\n      })\r\n      .catch(function(error) {\r\n          alert(error);\r\n      });\r\n}\r\n\r\n/* Attributs du formulaire */\r\nasync function setFormAttributes(inputName, regexModel, min, max, title) {\r\n    inputName.setAttribute(\"pattern\", regexModel);\r\n    inputName.setAttribute(\"min-length\", min);\r\n    inputName.setAttribute(\"max-length\", max);\r\n    inputName.setAttribute(\"title\", title);\r\n}\r\n\r\n\r\n/* *** DOM DYNAMIQUE ***  */\r\nasync function hydrateDom(product, cartCounter, totalPrice, productQuantity, cartKey) {\r\n    /* Création balises */\r\n    let cartItem = document.createElement(\"article\");\r\n    let cartItemImg = document.createElement(\"div\");\r\n    let productImg = document.createElement(\"img\");\r\n\r\n    let cartItemContent = document.createElement(\"div\");\r\n    let cartItemContentDescr = document.createElement(\"div\");\r\n    let cartItemContentTitle = document.createElement(\"h2\");\r\n    let cartItemContentColor = document.createElement(\"p\");\r\n    let cartItemContentPrice = document.createElement(\"p\");\r\n\r\n\r\n    let cartItemSettings = document.createElement(\"div\");\r\n\r\n    let settingsQuantity = document.createElement(\"div\");\r\n    let settingsQuantityText = document.createElement(\"p\");\r\n    let settingsQuantityInput = document.createElement(\"input\");\r\n\r\n    let deleteContainer = document.createElement(\"div\");\r\n    let deleteText = document.createElement(\"p\");\r\n\r\n\r\n    /* Position des balises créées */\r\n    document.getElementById(\"cart__items\").appendChild(cartItem);\r\n    cartItem.appendChild(cartItemImg);\r\n    cartItemImg.appendChild(productImg);\r\n\r\n    cartItem.appendChild(cartItemContent);\r\n    cartItemContent.appendChild(cartItemContentDescr);\r\n    cartItemContentDescr.appendChild(cartItemContentTitle);\r\n    cartItemContentDescr.appendChild(cartItemContentColor);\r\n    cartItemContentDescr.appendChild(cartItemContentPrice);\r\n\r\n\r\n    cartItemContent.appendChild(cartItemSettings);\r\n\r\n    cartItemSettings.appendChild(settingsQuantity);\r\n    settingsQuantity.appendChild(settingsQuantityText);\r\n    settingsQuantity.appendChild(settingsQuantityInput);\r\n\r\n    cartItemSettings.appendChild(deleteContainer);\r\n    deleteContainer.appendChild(deleteText);\r\n\r\n\r\n    /* Attributs et contenu des balises créées */\r\n    cartItem.setAttribute(\"class\", \"cart__item\");\r\n    cartItem.setAttribute(\"data-id\", productId);\r\n    cartItem.setAttribute(\"data-color\", productColor);\r\n\r\n    cartItemImg.setAttribute(\"class\", \"cart__item__img\")\r\n\r\n    productImg.setAttribute(\"src\", product.imageUrl);\r\n    productImg.setAttribute(\"alt\", product.altTxt);\r\n\r\n\r\n    cartItemContent.setAttribute(\"class\", \"cart__item__content\");\r\n    cartItemContentDescr.setAttribute(\"class\", \"cart__item__content__description\")\r\n    cartItemContentTitle.textContent = product.name;\r\n    cartItemContentColor.textContent = productColor;\r\n    cartItemContentPrice.textContent = Number(product.price) + \" €\";\r\n\r\n    cartItemSettings.setAttribute(\"class\", \"cart__item__content__settings\");\r\n    \r\n    settingsQuantity.setAttribute(\"class\", \"cart__item__content__settings__quantity\");\r\n    settingsQuantityText.textContent = \"Qté : \" + productQuantity;\r\n    settingsQuantityInput.setAttribute(\"type\", \"number\");\r\n    settingsQuantityInput.setAttribute(\"class\", \"itemQuantity\");\r\n    settingsQuantityInput.setAttribute(\"name\", \"itemQuantity\");\r\n    settingsQuantityInput.setAttribute(\"min\", \"1\");\r\n    settingsQuantityInput.setAttribute(\"max\", \"100\");\r\n    settingsQuantityInput.setAttribute(\"value\", productQuantity);\r\n\r\n    deleteContainer.setAttribute(\"class\", \"cart__item__content__settings__delete\");\r\n    deleteText.setAttribute(\"class\", \"deleteItem\");\r\n    deleteText.textContent = \"Supprimer\";\r\n\r\n    /* Attributs et contenus de balises existantes */\r\n    document.getElementById(\"totalQuantity\").textContent = cartCounter;\r\n    document.getElementById(\"totalPrice\").textContent = totalPrice;\r\n\r\n        /* MODIFICATIONS DU PANIER */\r\n\r\n    /* /* Modification quantité: */\r\n    settingsQuantityInput.addEventListener(\"change\", function(e) {\r\n        /* (suppression de la quantité originale du produit dans compteur panier et prix total: ) */\r\n        cartCounter -= Number(productQuantity);\r\n        totalPrice -= Number(productQuantity) * Number(product.price);\r\n        /* (màj nouvelle quantité du produit: ) */\r\n        productQuantity = e.target.value;\r\n        settingsQuantityText.textContent = \"Qté : \" + productQuantity;\r\n        /* (màj compteur panier et prix total: ) */\r\n        cartCounter += Number(productQuantity);\r\n        totalPrice += Number(productQuantity) * Number(product.price);\r\n        document.getElementById(\"totalQuantity\").textContent = cartCounter;\r\n        document.getElementById(\"totalPrice\").textContent = totalPrice;\r\n        /* (màj local storage: ) */\r\n        console.log(\"ancienne quantité: \" + cart[cartKey]);\r\n        cart[cartKey] = productQuantity;\r\n        console.log(\"nouvelle quantité: \" + cart[cartKey]);\r\n    });\r\n    \r\n    /* Suppression d'un produit du panier: */\r\n    deleteText.addEventListener(\"click\", function(e) {\r\n        cartCounter -= Number(productQuantity);\r\n        totalPrice -= Number(productQuantity) * Number(product.price);\r\n        let cartKey = productId + \" \" + productColor;\r\n        cart.removeItem(cartKey);\r\n        document.getElementById(\"totalQuantity\").textContent = cartCounter;\r\n        document.getElementById(\"totalPrice\").textContent = totalPrice;\r\n        e.target.closest(\"article\").remove();\r\n    });\r\n\r\n    /* Suivi vérification formulaire */\r\n    let userForm = document.getElementById(\"cart__order__form\");\r\n    userForm.addEventListener(\"submit\", function(e) {\r\n\r\n        let firstName = document.getElementById(\"firstName\");\r\n        let lastName = document.getElementById(\"lastName\");\r\n        let address = document.getElementById(\"address\");\r\n        let city = document.getElementById(\"city\");\r\n        let email = document.getElementById(\"email\");\r\n\r\n        let regNames = /^[a-zA-Z-\\s\\']+$/;\r\n        let regAddress = /^[0-9]{1, 4}[,\\s]{0, 1}^[a-zA-Z-\\s\\']+$/;\r\n        let regEmail = /^[\\w]+$[@]+^[\\w]+$[.]+^[a-z]{2, 4}/;\r\n\r\n        let userInputs = new Array (firstName, lastName, address, city, email);\r\n\r\n        for (userInput of userInputs) {\r\n            console.log(\"entrée utilisateur visée: \" + userInput);\r\n\r\n            let errorInput = document.getElementById(userInput.id + \"ErrorMsg\");\r\n            let test;\r\n\r\n            if (userInput.value.trim() == \"\") {     // (trim retire les espaces au début et fin de l'input)\r\n                errorInput.textContent = \"Veuillez compléter ce champ.\";\r\n                errorInput.style.color = \"red\";\r\n                e.preventDefault();\r\n            }\r\n\r\n            else {\r\n                switch (userInput) {\r\n                    case firstName || lastName || city:\r\n                        test = regNames.test(userInput);\r\n                        if (test == false) {\r\n                            e.preventDefault();\r\n                            errorInput.textContent = \"Veuillez compléter ce champ avec des lettres, espaces, tirets et apostrophes.\";\r\n                            break;\r\n                        } else {\r\n                            /*envoi formulaire */}\r\n                    case address:\r\n                        test = regAddress.test(userInput);\r\n                        if (test == false) {\r\n                            e.preventDefault();\r\n                            errorInput.textContent = \"Veuillez compléter ce champ avec éventuellement un numéro suivi d'une virgule et d'un espace, puis des lettres, espaces, tirets et apostrophes.\";\r\n                            break;\r\n                        } else {/*envoi formulaire */}\r\n                    case email:\r\n                        test = regEmail.test(userInput);\r\n                        if (test == false) {\r\n                            e.preventDefault();\r\n                            errorInput.textContent = \"Veuillez compléter ce champ avec une adresse email à un format valide (ex: adresse@nomdedomaine.org).\";\r\n                            break;\r\n                        } else {/*envoi formulaire */}\r\n                    default:\r\n                        e.preventDefault();\r\n                        errorInput.textContent = \"Une erreur s'est produite. Veuillez réessayer plus tard.\\nSi le problème persiste, n'hésitez pas à contacter notre support.\";\r\n                    /* ajouter une partie qui envoie le formulaire si aucun champ n'est erroné ou se fait dans la partie default justement? */\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    async function testFormInput (reg, formInput) {\r\n        return reg.test(formInput);\r\n    }\r\n\r\n}\r\n\r\n/* *** ACTIONS *** */\r\n(async function() {\r\n    /* POUR CHAQUE PRODUIT DU PANIER... */\r\n    for(let i = 0; i < cart.length; i++){\r\n        /* Infos en local storage: */\r\n        var cartKey = localStorage.key(i);\r\n        var splitKey = cartKey.split(\" \");\r\n        productId = splitKey[0];\r\n        productColor = splitKey[1];\r\n        /* Quantité (inpupt): */\r\n        productQuantity = cart.getItem(cartKey);\r\n        /* Màj compteur d'items */\r\n        cartCounter += Number(productQuantity);\r\n\r\n        /* Infos serveur: */\r\n        var product = await getProduct(productId);\r\n        totalPrice += Number(productQuantity) * Number(product.price);\r\n\r\n        /* Génération contenu page au loading: */\r\n        var pageContent = await hydrateDom(product, cartCounter, totalPrice, productQuantity, cartKey);\r\n    }\r\n\r\n})()\r\n\r\n        \r\n"]}